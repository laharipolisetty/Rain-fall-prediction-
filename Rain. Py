# Importing Libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.preprocessing import LabelEncoder

# Step 1: Load Dataset
# Replace 'rainfall_data.csv' with your dataset file path
data = pd.read_csv('rainfall_data.csv')

# Step 2: Data Exploration
print(data.head())  # Display the first few rows of the dataset
print(data.info())  # Check for missing values and data types

# Step 3: Data Preprocessing
# Handling missing values (e.g., filling with mean or dropping)
data.fillna(method='ffill', inplace=True)

# Encoding categorical variables
label_encoder = LabelEncoder()
data['RainToday'] = label_encoder.fit_transform(data['RainToday'])
data['RainTomorrow'] = label_encoder.fit_transform(data['RainTomorrow'])

# Splitting features (X) and target (y)
X = data.drop(columns=['RainTomorrow'])  # All features
y = data['RainTomorrow']  # Target variable

# Step 4: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Step 5: Model Training
model = Random ForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 6: Model Prediction
y_pred = model.predict(X_test)

# Step 7: Model Evaluation
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Step 8: Feature Importance
feature_importances = pd.DataFrame({
    'Feature': X.columns,
    'Importance': model.feature_importances_
}).sort_values(by='Importance', ascending=False)

print("\nFeature Importances:\n", feature_importances)
